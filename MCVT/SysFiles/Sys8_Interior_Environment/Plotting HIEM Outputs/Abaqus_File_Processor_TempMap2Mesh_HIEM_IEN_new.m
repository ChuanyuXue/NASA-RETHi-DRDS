function [Nodes,IEN,IEN_ADJ,Xcent,Ycent,Zcent,fv]=Abaqus_File_Processor_TempMap2Mesh(Name)

% ATTENTION USER: Please note that the ONLY line that needs to be modified
% in this code is Line 25 which reads something similar to b = load('TestPlot.mat');

% In order to plot either the pressure or temperature distribution of the
% HIEM, a ".mat" file needs to be created with the corresponding data.
% Then, simply place said ".mat" file in the same folder as this code and
% update the string on Line 25 to correspond to that of your ".mat" file.
% Then, run this script to generate the 3-Dimensional plot.

File = load('HIEM_EN112.mat');
fv = File.fv;
Nodes = File.Nodes;
IEN = File.IEN;
IEN_ADJ = File.IEN_ADJ;
IEN_L = File.IEN_L;
INN = File.INN;
Xcent = File.Xcent;
Ycent = File.Ycent;
Zcent = File.Zcent;
Xoutsurf = File.Xoutsurf;
Youtsurf = File.Youtsurf;
Zoutsurf = File.Zoutsurf;

%% plotting
x=Nodes(:,2);
y=Nodes(:,3);
z=Nodes(:,4);

b = load('TestPlot.mat');

bbtemp = b.abc;

temp = bbtemp;
temp(~isfinite(temp)) = 0;

fv.vertices=Nodes(:,2:4);

face_order=[1 2 3 4; 5 6 7 8; 1 2 6 5; 4 3 7 8; 2 6 7 3; 1 5 8 4];
fv.faces=[];
for i=1:size(IEN,2)
    for j=1:size(face_order,1)
        fv.faces=[fv.faces ; IEN(face_order(j,:),i)'];
    end
end

F = scatteredInterpolant(Xcent,Ycent,Zcent,temp,'linear','linear');
for i=1:size(Nodes,1)
    fv.facevertexcdata(i,1) = F(x(i),y(i),z(i));
end

figure
hold on
hp  = patch(fv,'CDataMapping','scaled','EdgeColor',[.7 .7 .7],'FaceColor','w','FaceAlpha',0.3);

for i = 1:size(IEN,2)
    text(Xcent(i),Ycent(i),Zcent(i),{sprintf('E#%d',i)},...
        'HorizontalAlignment','left','FontSize',8,'FontWeight','bold');
end
material shiny;
view(-45,45)
axis equal

figure
hold on
hp = patch(fv,'CDataMapping','scaled','EdgeColor',[0.7,0.7,0.7],'FaceColor','interp','FaceAlpha',0.3);
material shiny;
view(-45,45)
axis equal
axis off
colormap jet
colorbar east

fprintf('..Done\n')

IEN_ADJ_HIEM = IEN_ADJ;
save('IEN_ADJ_HIEM.mat','IEN_ADJ_HIEM')
end



%% Importing Function
function Ab2Mat = Importfile(filename)

startRow=1;
fid=fopen(filename);
g = textscan(fid,'%s','delimiter','\n');
fclose(fid);
endRow=length(g{1});


%IMPORTFILE Import numeric data from a text file as a matrix.
%   AB2MAT = IMPORTFILE(FILENAME) Reads data from text file FILENAME for
%   the default selection.
%
%   AB2MAT = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data from rows
%   STARTROW through ENDROW of text file FILENAME.
%
% Example:
%   Ab2Mat = importfile('Ab2Mat.txt', 1, 4493);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2020/05/30 17:35:22

%% Initialize variables.
delimiter = ',';
if nargin<=2
    startRow = 1;
    endRow = inf;
end

%% Format for each line of text:
%   column1: text (%s)
%	column2: text (%s)
%   column3: text (%s)
%	column4: text (%s)
%   column5: text (%s)
%	column6: text (%s)
%   column7: text (%s)
%	column8: text (%s)
%   column9: text (%s)
%	column10: text (%s)
%   column11: text (%s)
%	column12: text (%s)
%   column13: text (%s)
%	column14: text (%s)
%   column15: text (%s)
%	column16: text (%s)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines', startRow(1)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines', startRow(block)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Create output variable
Ab2Mat = [dataArray{1:end-1}];

end
